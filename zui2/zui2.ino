/*
 Name:		zui2.ino
 Created:	2018/9/3 23:04:12
 Author:	zanllp
*/
#include<avr/pgmspace.h>
#include<zuilcd5110.h>
// the setup function runs once when you press reset or power the board




/***********************************这些是图片****************************************************/

//在[]加progmem  让数据直接写入flash而不加载到ram
const char title[][160] PROGMEM = { {
		0x00, 0x00, 0xF8, 0x88, 0x88, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, 0x00,
		0x10, 0x60, 0x02, 0xCC, 0x80, 0x80, 0xFC, 0x40, 0x20, 0xFF, 0x10, 0x08, 0xF8, 0x00, 0x00, 0x00,
		0x00, 0x08, 0x30, 0x00, 0xFF, 0x20, 0x20, 0x20, 0x20, 0xFF, 0x20, 0x20, 0x22, 0x2C, 0x20, 0x00,
		0x00, 0x04, 0x84, 0x84, 0x44, 0x24, 0x54, 0x8F, 0x14, 0x24, 0x44, 0x84, 0x84, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1F, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x88, 0x88, 0x88, 0x88, 0x9F, 0x80, 0xF0, 0x00,
		0x04, 0x04, 0x7E, 0x01, 0x00, 0x00, 0x3F, 0x40, 0x40, 0x4F, 0x40, 0x44, 0x47, 0x40, 0x78, 0x00,
		0x04, 0x04, 0x02, 0x01, 0xFF, 0x80, 0x40, 0x30, 0x0E, 0x01, 0x06, 0x18, 0x20, 0x40, 0x80, 0x00,
		0x41, 0x39, 0x00, 0x00, 0x3C, 0x40, 0x40, 0x42, 0x4C, 0x40, 0x40, 0x70, 0x04, 0x09, 0x31, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	} ,{
		0x00, 0x3E, 0x22, 0xE2, 0x22, 0x3E, 0x00, 0x10, 0x88, 0x57, 0x24, 0x54, 0x8C, 0x00, 0x00, 0x00,
		0x20, 0x30, 0xAC, 0x63, 0x20, 0x18, 0x80, 0x90, 0x90, 0xFF, 0x90, 0x49, 0x4A, 0x48, 0x40, 0x00,
		0x80, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x80, 0xFE, 0x02, 0x02, 0xF2, 0x02, 0x02, 0xFE, 0x00, 0x00,
		0x20, 0x20, 0x20, 0xFF, 0x20, 0x22, 0x14, 0x90, 0x10, 0x00, 0xF8, 0x00, 0x00, 0xFF, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x7E, 0x40, 0x3F, 0x22, 0x22, 0x00, 0x01, 0xFE, 0x42, 0x42, 0x42, 0xFE, 0x01, 0x01, 0x00,
		0x22, 0x67, 0x22, 0x12, 0x12, 0x12, 0x40, 0x40, 0x20, 0x13, 0x0C, 0x14, 0x22, 0x41, 0xF8, 0x00,
		0x40, 0x20, 0x18, 0x07, 0x08, 0xB0, 0x40, 0x23, 0x18, 0x06, 0x01, 0x7E, 0x80, 0x83, 0xE0, 0x00,
		0x40, 0x40, 0x20, 0x13, 0x0C, 0x14, 0x22, 0x41, 0xF8, 0x00, 0x0F, 0x40, 0x80, 0x7F, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


	} , {
		0x40, 0x40, 0x42, 0xCC, 0x00, 0x00, 0x4A, 0x32, 0x22, 0x2A, 0xF1, 0x21, 0x31, 0x2D, 0x00, 0x00,
		0x10, 0x10, 0x10, 0xFF, 0x90, 0x20, 0x98, 0x48, 0x28, 0x09, 0x0E, 0x28, 0x48, 0xA8, 0x18, 0x00,
		0x80, 0x80, 0x9E, 0x92, 0x92, 0x92, 0x9E, 0xE0, 0x80, 0x9E, 0xB2, 0xD2, 0x92, 0x9E, 0x80, 0x00,
		0x40, 0x40, 0x42, 0xCC, 0x00, 0x40, 0xA0, 0x9E, 0x82, 0x82, 0x82, 0x9E, 0xA0, 0x20, 0x20, 0x00,
		0x00, 0x17, 0x15, 0xD5, 0x55, 0x57, 0x55, 0x7D, 0x55, 0x57, 0x55, 0xD5, 0x15, 0x17, 0x00, 0x00,
		0x00, 0x80, 0x40, 0x3F, 0x40, 0x80, 0x81, 0xBD, 0xA1, 0xA1, 0xBF, 0xA1, 0xA1, 0xBD, 0x81, 0x00,
		0x02, 0x42, 0x81, 0x7F, 0x00, 0x40, 0x40, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x40, 0x00,
		0x08, 0x08, 0xF4, 0x94, 0x92, 0x92, 0xF1, 0x00, 0x01, 0xF2, 0x92, 0x94, 0x94, 0xF8, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x3F, 0x90, 0x88, 0x40, 0x43, 0x2C, 0x10, 0x28, 0x46, 0x41, 0x80, 0x80, 0x00,
		0x40, 0x40, 0x40, 0x7F, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x7F, 0x40, 0x40, 0x40, 0x00,

	},{
		0x00, 0x00, 0xF8, 0x88, 0x88, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, 0x00,
		0x10, 0x10, 0xD0, 0xFF, 0x90, 0x10, 0x00, 0xFE, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xE0, 0x9F, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x08, 0x00, 0x00,
		0x00, 0x00, 0xF8, 0x88, 0x88, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, 0x00,
		0x40, 0x42, 0xCC, 0x00, 0x00, 0xFE, 0x82, 0x92, 0x92, 0xFE, 0x92, 0x92, 0x82, 0xFE, 0x00, 0x00,
		0x00, 0x00, 0x1F, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x88, 0x88, 0x88, 0x88, 0x9F, 0x80, 0xF0, 0x00,
		0x04, 0x03, 0x00, 0xFF, 0x00, 0x83, 0x60, 0x1F, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x40, 0x78, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x48, 0x80, 0x40, 0x3F, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1F, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x88, 0x88, 0x88, 0x88, 0x9F, 0x80, 0xF0, 0x00,
		0x00, 0x00, 0x3F, 0x10, 0x88, 0x7F, 0x00, 0x1E, 0x12, 0x12, 0x12, 0x5E, 0x80, 0x7F, 0x00, 0x00,
	} ,{
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x40, 0xA0, 0x10, 0x08, 0x00, 0x00,
		0x10, 0x10, 0x10, 0xFF, 0x90, 0x20, 0x98, 0x48, 0x28, 0x09, 0x0E, 0x28, 0x48, 0xA8, 0x18, 0x00,
		0x40, 0x40, 0x42, 0xCC, 0x00, 0x40, 0xA0, 0x9E, 0x82, 0x82, 0x82, 0x9E, 0xA0, 0x20, 0x20, 0x00,
		0x00, 0x17, 0x15, 0xD5, 0x55, 0x57, 0x55, 0x7D, 0x55, 0x57, 0x55, 0xD5, 0x15, 0x17, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0C, 0x10, 0x21, 0x42, 0xF0, 0x00,
		0x02, 0x42, 0x81, 0x7F, 0x00, 0x40, 0x40, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x40, 0x00,
		0x00, 0x00, 0x00, 0x3F, 0x90, 0x88, 0x40, 0x43, 0x2C, 0x10, 0x28, 0x46, 0x41, 0x80, 0x80, 0x00,
		0x40, 0x40, 0x40, 0x7F, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x7F, 0x40, 0x40, 0x40, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	} ,{
		0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xBE, 0x2A, 0x2A, 0x2A, 0xEA, 0x2A, 0x2A, 0x2A, 0x3E, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x08, 0x30, 0x00, 0xFF, 0x20, 0x20, 0x20, 0x20, 0xFF, 0x20, 0x20, 0x22, 0x2C, 0x20, 0x00,
		0x00, 0x04, 0x84, 0x84, 0x44, 0x24, 0x54, 0x8F, 0x14, 0x24, 0x44, 0x84, 0x84, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7F, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x40, 0x40, 0x00,
		0x00, 0x44, 0x42, 0x49, 0x49, 0x49, 0x49, 0x7F, 0x49, 0x49, 0x49, 0x49, 0x41, 0x40, 0x00, 0x00,
		0x04, 0x04, 0x02, 0x01, 0xFF, 0x80, 0x40, 0x30, 0x0E, 0x01, 0x06, 0x18, 0x20, 0x40, 0x80, 0x00,
		0x41, 0x39, 0x00, 0x00, 0x3C, 0x40, 0x40, 0x42, 0x4C, 0x40, 0x40, 0x70, 0x04, 0x09, 0x31, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	} ,
};

const char icon[][128]PROGMEM =//24 x24
{
	/***********************电池***********************/
	{ 0x00, 0xE0, 0x20, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0xA0, 0x20,
	0xA0, 0xA0, 0xA0, 0x20, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x3C, 0x3C, 0x00,
	0x00, 0x07, 0x04, 0x05, 0x05, 0x05, 0x04, 0x05, 0x05, 0x05, 0x04, 0x05, 0x05, 0x05, 0x05, 0x04,
	0x05, 0x05, 0x05, 0x04, 0x07, 0x00, 0x00, 0x00,
	},
	/*******************路线规划*************************/
	{ 0xFF, 0x21, 0x21, 0x21, 0x21, 0xA1, 0xFF, 0xA1, 0x21, 0x21, 0x21, 0xFF, 0x21, 0x21, 0x21, 0x21,
	0x21, 0xFF, 0x21, 0x21, 0x21, 0x21, 0x21, 0xFE, 0xFF, 0x24, 0x3C, 0x0A, 0x09, 0x08, 0xFF, 0x08,
	0x09, 0x0A, 0x0C, 0xFF, 0x18, 0x28, 0x48, 0x88, 0x48, 0xFF, 0x48, 0x88, 0x08, 0x88, 0x88, 0xFF,
	0x7F, 0x82, 0x82, 0x82, 0x82, 0x82, 0xFF, 0x82, 0x82, 0x82, 0x82, 0x7F, 0x82, 0x82, 0x82, 0x82,
	0x82, 0x7F, 0x82, 0x82, 0x83, 0x87, 0x84, 0xFF,
	},
	/***********************遥控器**********************/
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x40, 0xC0, 0xC0, 0xFF, 0xFF, 0xC1, 0xC1, 0x41,
	0x81, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3E, 0xDE, 0x2E, 0x2E, 0x32,
	0xDE, 0xFF, 0xFF, 0xDF, 0xFF, 0x7F, 0x3F, 0xDE, 0x22, 0xAE, 0x22, 0xDE, 0x3C, 0xF0, 0x00, 0x00,
	0x00, 0x00, 0x3F, 0x7F, 0xDD, 0xCD, 0x9D, 0xFD, 0x8E, 0x8F, 0x8F, 0x8A, 0x8B, 0x8F, 0x8F, 0xFE,
	0xFD, 0xDD, 0xCD, 0xFE, 0x7F, 0x0F, 0x00, 0x00,
	},
	/*******************电机与电调***********************/
	{ 0xFF, 0xCF, 0xC7, 0xC7, 0xC3, 0x83, 0x83, 0x03, 0x03, 0x07, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
	0x7F, 0x3F, 0x01, 0x03, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07,
	0x86, 0xC4, 0xE0, 0x00, 0x01, 0x13, 0x31, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF,
	0xFF, 0xF8, 0xF0, 0xE0, 0xC0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xE0, 0xC0,
	0xC0, 0xC1, 0xC1, 0xE3, 0xE3, 0xF3, 0xFB, 0xFF,
	},
	/********************飞控****************************/
	{ 0x00, 0x00, 0x00, 0x20, 0x60, 0x60, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0xC0, 0xC0,
	0xE0, 0xF0, 0xF8, 0x7C, 0x3C, 0x1E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1,
	0xE1, 0xF3, 0xFF, 0x7F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x03, 0x03, 0x1B, 0x1E, 0x0F, 0xFF, 0xF7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x07, 0x0F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	/******************卫星***********************/
	{ 0x08, 0x1C, 0x3E, 0x7F, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x80, 0xE0, 0xE0, 0xC0, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xC8, 0x88, 0x09, 0x1D,
	0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xCF, 0xC6, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x18, 0x1C, 0x0E, 0x07, 0x03, 0x06, 0x0C, 0x08, 0x08, 0x0F, 0x00, 0x00, 0x03, 0x07,
	0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0x7E, 0x3C, 0x18
	}
};
const char vs[]PROGMEM = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
0x07, 0x03, 0x03, 0xF1, 0xF3, 0xE3, 0xC7, 0x8F, 0x1F, 0x1F, 0x1F, 0x0F, 0x07, 0x83, 0xC1, 0xC0,
0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0,
0xC0, 0xCF, 0xCF, 0xE7, 0xF3, 0xF1, 0xF8, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC1, 0x83, 0x07, 0x07,
0x0F, 0x1F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF3, 0xEF, 0xF3,
0xFC, 0xFF, 0xFF, 0xE9, 0xEA, 0xEA, 0xF2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8,
0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF,
};//visual studio
const char acfun[]PROGMEM =
{ 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x90, 0xC8, 0xE0, 0xE4, 0xE4, 0xC4, 0x04, 0x04, 0x04,
0x08, 0x18, 0x30, 0xD0, 0x08, 0x08, 0x04, 0x04, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00,
0x00, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x0E, 0x08, 0x11, 0x21, 0x41, 0xFC, 0xFE, 0xFE, 0x06,
0x0C, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xFC, 0x3E, 0x3F, 0x7B,
0x78, 0x78, 0x7B, 0x7F, 0x7F, 0xF8, 0xE0, 0xC0, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF0, 0xC0, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x0C,
0xF0, 0xC0, 0x00, 0x00, 0x01, 0x03, 0x0E, 0xFC, 0x5C, 0x3C, 0x0F, 0x00, 0x00, 0x00, 0x80, 0x40,
0x40, 0x40, 0x40, 0x23, 0x26, 0xAC, 0xF8, 0xF8, 0x30, 0xF0, 0xF0, 0x90, 0x71, 0xFB, 0x0F, 0x07,
0x01, 0x41, 0x00, 0x80, 0x70, 0x30, 0x3C, 0x1B, 0x88, 0x87, 0x81, 0x81, 0x06, 0x10, 0xFF, 0x00,
0x20, 0x10, 0x0C, 0x03, 0x0B, 0xCC, 0xF0, 0xC7, 0x41, 0x8E, 0xF0, 0x00, 0x00, 0x00, 0xC1, 0x7E,
0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x3C, 0xCC, 0x06, 0x83, 0x81, 0x60, 0x18,
0x07, 0x1F, 0x74, 0xB9, 0x13, 0x5C, 0x10, 0x08, 0x04, 0x12, 0x60, 0xC0, 0x4C, 0x2E, 0x3F, 0x1F,
0x7F, 0x7D, 0x39, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x17, 0x5E, 0x6E,
0x60, 0x67, 0x10, 0x1E, 0x1E, 0x1F, 0x07, 0x0C, 0x10, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x18, 0x06, 0x03, 0x00, 0x00, 0x80, 0x60, 0x21,
0x22, 0x12, 0x14, 0x12, 0xF8, 0x01, 0x23, 0x23, 0x03, 0x41, 0xC0, 0xC0, 0xC0, 0xD0, 0x20, 0x60,
0x66, 0xA2, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x40,
0x40, 0x40, 0x40, 0x58, 0x27, 0xE0, 0xE0, 0x90, 0x80, 0x88, 0x84, 0x81, 0x80, 0x80, 0x80, 0x80,
0x80, 0x84, 0x98, 0xF0, 0xF8, 0xA0, 0x80, 0x82, 0xE7, 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};//ACFUN55X48
const char arduino[]PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xC0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0x7F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x3F,
0x3F, 0x7F, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xE0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0x7F, 0x3F,
0x3F, 0x1F, 0x9F, 0x9F, 0x9F, 0x9F, 0x1F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0x80, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E,
0x1E, 0x80, 0xC0, 0xE1, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x80, 0x1E,
0x1E, 0x1E, 0x7F, 0x7F, 0x7F, 0x7F, 0x1E, 0x1E, 0x00, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7F, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x07, 0x01, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7F,
0x7F, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01,
0x00, 0xF8, 0xFC, 0xCE, 0xCE, 0xFC, 0xF8, 0x00, 0xFC, 0xFE, 0x66, 0xFE, 0xDC, 0x00, 0xFE, 0xFE,
0x86, 0x86, 0xFE, 0xFC, 0x00, 0xFE, 0xFE, 0xC0, 0xC0, 0xFE, 0xFE, 0x00, 0x86, 0x86, 0xFE, 0xFE,
0x86, 0x86, 0x00, 0xFE, 0xFC, 0x38, 0x70, 0xFE, 0xFE, 0x00, 0x78, 0xFC, 0x86, 0x86, 0xFC, 0x78,
0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01,
0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00
,
};//arduino图标48x48*/
const char kmh[]PROGMEM = { 0x1F, 0x04, 0x1A, 0x00, 0x1E, 0x02, 0x1C, 0x02, 0x1E, 0x00, 0xF8, 0x20, 0xE0, }; //km/h
const char ssd[]PROGMEM = { 0x02, 0x05, 0x72, 0x88, 0x88, 0x88, }; //摄氏度
const char wd[10]PROGMEM = { 0x01, 0x01, 0x7F, 0x01, 0x39, 0x54, 0x48, 0x00, 0x6C, 0x6C, };//温度
/*************************************************************************************************/





/*****************私有***********************/

boolean ch5;
int ch6 = analogRead(A2);
boolean ch7;//第七通道
boolean ch8;
float recv = 11.1;//接收机电压初始值11.1v
int speed;//速度
float heigDraw;//高度
unsigned int wxsl;//卫星数量
float temp = 24.0;//温度
int afcs;//飞控状态
float jgdy = 3.6; //报警电压
int pwm = 920;
/*************************开机界面*****************************/
void kjjm(int time)
{
	Draw(1, 0, 48, 48, arduino);
	Draw(53, 1, 30, 32, vs);
	delay(time / 2);
	Clear();
	Draw(15, 0, 55, 48, acfun);
	delay(time / 2);
	Clear();
}
/**************按键按下***当digitalRead(key) == 0时返回1********************/
boolean click()
{
	if (digitalRead(key) == 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
	Clear();
}

/*****************************************************/
//                    选项
/****************************************************/
/****************************光标选项移动****************************/
void gb_end()//光标移动
{
	if (analogRead(vertical_input) > limit_high)
	{
		cursor_now++;
		if (cursor_now > cursor_num - 1)
		{
			cursor_now = 0;
		}
		Clear();
	}
	if (analogRead(vertical_input) < limit_low)
	{
		cursor_now--;
		if (cursor_now < 0)
		{
			cursor_now = cursor_num - 1;
		}
		Clear();
	}
	if (cursor_now > -1 && cursor_now < cursor_num)//限定范围防止访问到错误的内存
	{
		Draw(cursor_pos[cursor_now][0], cursor_pos[cursor_now][1], 6, 8, gbf);

	}
	gb_zc_Text(54, 5, "home");
	page_last = page_now;
	if (cursor_now == cursor_num - 1 && click())
	{
		page_now = 0;
	}

}

/*******************************光标选项注册****************xy坐标，a变量，b有效数位，c 0整数1浮点*/
void gb_zc_Var(int x, int y, double a, int b, boolean c) //光标标注,注册选项,保存各个光标的坐标
{
	if (page_last != page_now)
	{

		if (ixy == 0)
		{
			cursor_num = 0;
			ixy = 1;
		}
		cursor_num++;
		cursor_pos[cursor_num - 1][0] = x;
		cursor_pos[cursor_num - 1][1] = y;
	}
	else
	{
		ixy = 0;
	}
	//Serial.println(cursor_num);
	x += 6;
	if (c == 0)
	{
		Var(x, y, a, b, 0);
	}
	if (c == 1)
	{
		Var(x, y, a, b, 1);
	}
}
/*******************************光标选项注册****************xy坐标，l字符串*/
void gb_zc_Text(int x, int y, char *l)//光标标注,注册选项,保存各个光标的坐标
{
	if (page_last != page_now)
	{

		if (ixy == 0)
		{
			cursor_num = 0;
			ixy = 1;
		}
		cursor_num++;
		cursor_pos[cursor_num - 1][0] = x;
		cursor_pos[cursor_num - 1][1] = y;
	}
	else
	{
		ixy = 0;
	}
	x += 6;
	Text(x, y, l, 0);
}

/******************************反显选项移动************************************/
void ReverseDisplayend()//反显移动
{
	if (analogRead(vertical_input) > limit_high)
	{
		cursor_now++;
		if (cursor_now > cursor_num - 1)
		{
			cursor_now = 0;
		}
	}
	if (analogRead(vertical_input) < limit_low)
	{
		cursor_now--;
		if (cursor_now < 0)
		{
			cursor_now = cursor_num - 1;
		}
	}

	if (page_now != 0 && page_now != 255) //主页，提示框不需要hmoe键
	{
		ReverseDisplayzc_Text(60, 5, "home");
	}
	page_last = page_now;
	if (cursor_now == cursor_num - 1 && click())
	{
		page_now = 0;
	}
	delay(100);
}
/******************************反显选项注册*********注册选项,保存各个光标的坐标,a浮点数，b数值的有效数位,c 0为常数，1是浮点*///
void ReverseDisplayzc_Var(int x, int y, double a, int b, int  c)//反显标注光标标注,注册选项,保存各个光标的坐标,a浮点数，b数值的有效数位,c 0为常数，1是浮点
{
	if (page_last != page_now)
	{

		if (ixy == 0)
		{
			cursor_num = 0;
			ixy = 1;
		}
		cursor_num++;
		cursor_pos[cursor_num - 1][0] = x;
		cursor_pos[cursor_num - 1][1] = y;
	}
	else
	{
		ixy = 0;
	}
	if (x == cursor_pos[cursor_now][0] && y == cursor_pos[cursor_now][1])//符合当前光标坐标的反显输出，不符合的正常输出
	{
		Var(x, y, a, b, c,1);
	}
	else
	{
		Var(x, y, a, b, c);
	}

}
/*****************字符串反显选项注册***************xy坐标，l字符串*******/
void ReverseDisplayzc_Text(int x, int y, char* l)

{

	if (page_last != page_now)
	{

		if (ixy == 0)
		{
			cursor_num = 0;
			ixy = 1;
		}
		cursor_num++;
		cursor_pos[cursor_num - 1][0] = x;
		cursor_pos[cursor_num - 1][1] = y;
	}
	else
	{
		ixy = 0;
	}
	if (x == cursor_pos[cursor_now][0] && y == cursor_pos[cursor_now][1])//符合当前光标坐标的反显输出，不符合的正常输出
	{
		Text(x, y, l, 1);
	}
	else
	{
		Text(x, y, l, 0);
	}

}





/*******************滑动选项***************************/
void hd_yd(/*,char* tb ,char* bt*/)
{

	cursor_num = sizeof(icon) / 128;
	if (analogRead(horiziontal_input) > limit_high)
	{
		cursor_now++;
		if (cursor_now > cursor_num - 1)
		{
			cursor_now = 0;
		}
		Clear();
	}
	if (analogRead(horiziontal_input) < limit_low)
	{
		cursor_now--;
		if (cursor_now < 0)
		{
			cursor_now = cursor_num - 1;
		}
		Clear();
	}

	if (cursor_now > 0 && cursor_now < cursor_num - 1)
	{

		Draw(0, 2, 24, 24, icon[cursor_now - 1]);
		Draw(30, 2, 24, 24, icon[cursor_now]);
		Draw(59, 2, 24, 24, icon[cursor_now + 1]);
	}

	if (cursor_now == 0)
	{
		Draw(0, 2, 24, 24, icon[cursor_num - 1]);
		Draw(30, 2, 24, 24, icon[cursor_now]);
		Draw(59, 2, 24, 24, icon[cursor_now + 1]);
	}
	if (cursor_now == cursor_num - 1)
	{
		Draw(0, 2, 24, 24, icon[cursor_num - 2]);
		Draw(30, 2, 24, 24, icon[cursor_now]);
		Draw(59, 2, 24, 24, icon[0]);
	}
	Draw(0, 0, 80, 16, title[cursor_now]); //菜单标题文件必须一一对应图标文件
	if (millis() - time_temp > 1000) //每隔1000ms更换一次
	{
		Draw(33, 5, 16, 8, arrow[arrow_state]);
		arrow_state = !arrow_state;
		time_temp = millis();
	}
	page_last = page_now;

}
/**********************数据更改对话框****（被修改的数据，有效数位，整数/浮点，每50ms步进程度）*****/
double msg_box(double number, int b, boolean c, float range)//number要修改的数据，b数据的有效数位，c是否浮点数，range每隔50ms变动的幅度
{
	cursor_now_temp = cursor_now;
	page_now_temp = page_now;
	cursor_num_temp = cursor_num;
	page_last = page_now;
	page_now = 255;
	delay(10);
	Clear();
	number_temp = number;
	Draw(12, 1, 60, 32, frame);
	while (1)
	{
		Serial.println(number_temp);
		delay(50);
		data_probe();
		Var(30, 2, number_temp, b, c);
		if (analogRead(horiziontal_input) > limit_high)
		{
			number_temp += range;
			Draw(12, 1, 60, 32, frame);
			delay(50);

		}
		if (analogRead(horiziontal_input) < limit_low)
		{
			number_temp -= range;
			Draw(12, 1, 60, 32, frame);
			delay(50);
		}
		ReverseDisplayzc_Text(25, 4, "YES");
		ReverseDisplayzc_Text(50, 4, "NO");
		ReverseDisplayend();
		if (cursor_now == 0 && click())
		{
			cursor_now = cursor_now_temp;
			cursor_num = cursor_num_temp;
			page_now = page_now_temp;
			Clear();
			return number_temp;

		}

		if (cursor_now == 1 && click())
		{
			cursor_now = cursor_now_temp;
			cursor_num = cursor_num_temp;
			page_now = page_now_temp;
			Clear();
			return number;
		}
	}

}
/*************************************************************/

//                         页面
/*************************************************************/
/***************************UI页面切换*******************************/
void UI()//页面数量
{

	if ((page_now == 0 && analogRead(horiziontal_input) < limit_low) || (page_now == 0 && analogRead(horiziontal_input) > limit_high))
	{
		page_now = 1;//在菜单页时活动横向摇杆回到主页
	}
	if (page_now == 1 && analogRead(vertical_input) > limit_high || (page_now == 1 && analogRead(vertical_input) < limit_low))
	{
		page_now = 0;//在主页时活动横向摇杆进入菜单页
	}
	if (page_last != page_now) //页面切换时清屏
	{
		Clear();
	}
	/***************根据页面编号进行切换****************/
	switch (page_now)//页面切换
	{
	case 1:
		menu();//菜单
		break;
	case 2:

		battery();//电池
		break;
	case 4:

		range();//行程
		break;
	case 5:

		fan();//行程
		break;
	case 0:
		home();//主页
		break;

	default:
		home();//主页
		break;
	}
}

/*********************************主页***********************************/
void home() {
	/***********第一行**************/
	Text(0, 0, "CH5:", 0);
	if (ch5 == 1)
	{
		Text(22, 0, "ON", 0);
	}
	else
	{
		Text(22, 0, "OFF", 0);
	}
	Text(44, 0, "CH6:", 0);
	Var(66, 0, map(analogRead(A2), 0, 1023, 0, 999), 3, 0);//螺距，给飞手判断电位器是否回中
														  /***********第二行**************/
	Text(0, 1, "CH7:", 0);
	if (click() && cursor_now == 0) //当页面编号当前光标符合ch7，io2为低电位时，"ON""OFF"交换
	{
		ch7 = !ch7;
		Clear();
	}
	if (ch7 == 0) {
		ReverseDisplayzc_Text(22, 1, "OFF");
	}
	else
	{
		ReverseDisplayzc_Text(22, 1, "ON");
	}
	Text(44, 1, "CH8:", 0);
	if (click() && cursor_now == 1)
	{
		ch8 = !ch8;
		Clear();
	}
	if (ch8 == 0) {
		ReverseDisplayzc_Text(66, 1, "OFF");
	}
	else {
		ReverseDisplayzc_Text(66, 1, "ON");
	}
	/***********第三行**************/
	Text(0, 2, "T:", 0);
	Var(11, 2, analogRead(A7) / 206.4, 3, 1);//xy(13,2),读取A7的模拟值除于206.4（若除于一个整数返回值也是一个整数），3位有效数字，浮点数
	Text(32, 2, "v", 0);
	Text(44, 2, "R:", 0);
	Var(55, 2, recv, 3, 1);
	Text(76, 2, "v", 0);
	/***********第四行**************/
	Text(0, 3, "V;", 0);
	Var(11, 3, speed, 3, 0);//(11,3),speed,3位有效数字，整数
	Draw(30, 3, 13, 8, kmh);//调用长度为13宽度为8的图像kmh到(30，3）
	Text(44, 3, "H:", 0);
	Var(55, 3, heigDraw, 3, 0);
	Text(76, 3, "m", 0);
	/***********第五行**************/
	Text(0, 4, "GPS:", 0);
	if (wxsl == 0)
	{
		Text(22, 4, "err", 0);
	}
	else
	{
		Var(22, 4, wxsl, 2, 0);
	}
	Draw(44, 4, 10, 8, wd);
	Var(55, 4, temp, 3, 1);
	Draw(76, 4, 6, 8, ssd);
	/***********第六行**************/
	Text(0, 5, "AFCS:", 0);//飞控模式切换
	if (click() && cursor_now == 2)
	{
		afcs++;
		if (afcs > 2)
		{
			afcs = 0;
		}
		Clear();
	}
	switch (afcs)//afcs飞控状态
	{
	case 0:
		ReverseDisplayzc_Text(38, 5, "Manual");//当飞控状态为0时手动控制
		break;
	case 1:
		ReverseDisplayzc_Text(38, 5, "SAS");//增稳系统
		break;
	case 2:
		ReverseDisplayzc_Text(38, 5, "Auto");//自动控制
		break;
	default:
		break;
	}

	ReverseDisplayend();//页面结束,当前页面使用反显,使用纵向电位器对面光标进行控制,必须放在页面末尾
}
/*****************************选项页******************************/
void menu()//滑动选项页，页面编号为1
{
	hd_yd(); //当前页面使用滑动,
	for (int i = 0; i < 6; i++)
	{
		if (cursor_now == i && click())
		{
			page_now = cursor_now + 2; //0是主页1，是滑动选项页
			break;
		}
	}

}
/*****************************行程页********************************/
void range(void)//电位器行程，页面编号为4
{

	gb_zc_Var(0, 1, analogRead(A4), 4, 0); //副翼
	gb_zc_Var(40, 1, analogRead(A5), 4, 0);//油门
	gb_zc_Var(0, 2, analogRead(A6), 4, 0);//偏航
	gb_zc_Var(40, 2, analogRead(A3), 4, 0);//俯仰
	gb_zc_Var(0, 3, analogRead(A2), 4, 0);//螺距
	Var(0, 4, digitalRead(10), 1, 0);//
	Var(30, 4, digitalRead(2), 1, 0);//左
	Var(40, 4, analogRead(A6), 1, 0);//右
	Var(50, 4, digitalRead(A4), 1, 0);//上
	Var(60, 4, digitalRead(A5), 1, 0);//下
	gb_zc_Var(60, 0, jgdy, 2, 1);
	if (cursor_now == 5 && click())//当光标位置为0，按键按下时
	{
		jgdy = msg_box(jgdy, 2, 1, 0.1);//返回修改的数据,打开对话框修改数据（被修改的数据，有效数位，整数/浮点，每50ms步进程度）
		UI();//在从对话框切回时，光标数量未能正确计算，修复无果，因而重新进入页面。因为保留了光标位置和页面编号所以光标位置不变。
	}
	gb_end();//当前页面使用光标,使用纵向电位器对面光标进行控制,必须放在页面末尾
}
/********************************电池状态页******************************/
void battery()//页面编号为2
{
	//最低电压警告设置
	Text(0, 0, "T:", 0);
	Var(11, 0, analogRead(A7) / 206.4, 2, 1);//xy(13,2),读取A7的模拟值除于206.4（若除于一个整数返回值也是一个整数），3位有效数字，浮点数
	Text(30, 0, "v", 0);
	Text(0, 1, "low limit:", 0);
	ReverseDisplayzc_Var(58, 1, jgdy, 2, 1);
	if (cursor_now == 0 && click())//当光标位置为0，按键按下时
	{
		jgdy = msg_box(jgdy, 2, 1, 0.1);//返回修改的数据,打开对话框修改数据（被修改的数据，有效数位，整数/浮点，电位器活动时每50ms0.1）
		UI();//在从对话框切回时，光标数量未能正确计算，修复无果，因而重新进入页面。因为保留了光标位置和页面编号所以光标位置不变。
	}
	Text(78, 1, "v", 0);
	/*******************/
	Text(0, 3, "R:", 0);
	Var(11, 3, recv, 3, 1);
	Text(35, 3, "v", 0);
	Text(0, 4, "low limit:", 0);
	ReverseDisplayzc_Var(58, 4, recv, 3, 1);
	if (cursor_now == 1 && click())//当光标位置为0，按键按下时
	{
		recv = msg_box(recv, 3, 1, 0.5); //返回修改的数据,打开对话框修改数据（被修改的数据，有效数位，整数/浮点，电位器活动时每50ms0.5）
		UI();//在从对话框切回时，光标数量未能正确计算，修复无果，因而重新进入页面。因为保留了光标位置和页面编号所以光标位置不变。
	}
	Text(78, 4, "v", 0);
	ReverseDisplayend();//页面结束当前页面使用反显

}
void fan()
{
	Var(0, 2, pwm, 4, 0,1);
	if (cursor_now == 0 && click())
	{
		msg_box(pwm, 4, 0, 50);
		UI();
	}
	ReverseDisplayend();
}
/****************数据探针************************/
void data_probe()//数据探针
{
	Serial.print("click:"); Serial.print(click()); Serial.print(" ");
	Serial.print("cursor_num:"); Serial.print(cursor_num); Serial.print(" ");
	Serial.print("page_now:"); Serial.print(page_now); Serial.print(" ");
	Serial.print("cursor_now:"); Serial.print(cursor_now); Serial.println(" ");
	//Serial.print("key:"); Serial.println(digitalRead(key));
}
void softpwm(int gpio, int  pwm)
{
	pwm = constrain(pwm, 920, 2120);
	digitalWrite(gpio, 1);
	delayMicroseconds(pwm);
	digitalWrite(gpio, 0);
	delay(19);
}
void setup()
{
	LcdInit(6, 7, 5, 4, 3);//rst,ce,dc,din,clk
	kjjm(1000);//开机界面,持续时间1000ms
	Serial.begin(115200);
}

void loop()
{
	UI();//启动界面
	data_probe();
	softpwm(2, pwm);
}
