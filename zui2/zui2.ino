/*
 Name:		zui2.ino
 Created:	2018/9/3 23:04:12
 Author:	zanllp
*/

#include<avr/pgmspace.h>


/*******************数据**************************/
static int RST;
static int CE;
static int DC;
static int DIN;
static int CLK;
static int cursor_pos[20][2];//存放当前页面所有光标的坐标
static int cursor_num = 0;//当前页面的光标数量
static int cursor_num_temp;
static int cursor_now = 1;//存放当前光标在当前页面的位数
static int cursor_now_temp;
static int page_now = 0;//当前页面编号
static int page_now_temp;
static int page_last = 1;//上个页面编号
static unsigned time_temp;
static boolean arrow_state;
static boolean first_record;//是否为当前页面首次记录光标位置
static boolean page_arrow = true;//当前页面是否使用箭头作为光标指示
static int key = 12;//ps2摇杆的按键
static int vertical_input = A0;//纵向选项电位器输入
static int horiziontal_input = A1; //横向选项电位器输入
static int limit_high = 600;//读取电位器模拟值的上限，超过时触发
static int limit_low = 400;//下限
static const char decimal_point[]PROGMEM = { 0x00, 0x40, }; //小数点
static const char frame[]PROGMEM = { 0xFF, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,

};
static const char ASCIIDZ[67] = " !:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.";
static char char_conver_temp[112];//字符转换缓存
static const char xz[8] PROGMEM = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, };//用到的地方不多就不重写名字了
static const char ASCII[92][6]PROGMEM = {
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
	{ 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 },    // horiz lines
};
static const char cursor_arrow[6]PROGMEM = { 0x10, 0x10, 0x10, 0x54, 0x38, 0x10 };//箭头样式的光标
///设置ps2摇杆的连接的针脚   按键，纵向选项电位器输入，横向选项电位器输入
void PS2Set(int _key, int _vertical_input, int _horiziontal_input)
{
	key = _key;
	vertical_input = _vertical_input;
	horiziontal_input = _horiziontal_input;
}

//LCD初始化函数
void LcdInit(int RST0, int CE0, int DC0, int DIN0, int CLK0)
{
	RST = RST0;
	CE = CE0;
	DC = DC0;
	DIN = DIN0;
	CLK = CLK0;
	//先设置为输出
	pinMode(CLK, OUTPUT);
	pinMode(DIN, OUTPUT);
	pinMode(DC, OUTPUT);
	pinMode(CE, OUTPUT);
	pinMode(RST, OUTPUT);

	// 产生一个让LCD复位的低电平脉冲
	digitalWrite(RST, LOW);

	delayMicroseconds(1);
	digitalWrite(RST, HIGH);

	// 关闭LCD
	digitalWrite(CE, LOW);
	delayMicroseconds(1);

	// 使能LCD
	digitalWrite(CE, HIGH); //LCD_CE = 1;
	delayMicroseconds(1);
	WriteData(0x21, 0); // 使用扩展命令设置LCD模式
	WriteData(0xc8, 0); // 设置偏置电压
	WriteData(0x06, 0); // 温度校正
	WriteData(0x13, 0); // 1:48
	WriteData(0x20, 0); // 使用基本命令
	Clear();             // 清屏
	WriteData(0x0c, 0); // 设定显示模式，正常显示

							 // 关闭LCD
	digitalWrite(CE, LOW); //LCD_CE = 0;
}
//LCD清屏函数
void Clear(void)
{
	unsigned int i;
	WriteData(0x0c, 0);
	WriteData(0x80, 0);
	for (i = 0; i < 504; i++)
	{
		WriteData(0, 1);
	}
}
//设置字符位置函数  xy坐标
void SetPostion(unsigned char X, unsigned char Y)
{
	WriteData(0x40 | Y, 0);// column
	WriteData(0x80 | X, 0);// row
}
//数据写入到lcd dat数据，command 0命令1数据选择
void WriteData(unsigned char dat, unsigned char command)//data ：写入的数据；command ：写数据 / 命令选择；
{
	unsigned char i;
	digitalWrite(CE, LOW); // 使能LCD_CE = 0
	if (command == 0)
	{
		digitalWrite(DC, LOW);// 传送命令 LCD_DC = 0;
	}
	else
	{
		digitalWrite(DC, HIGH);// 传送数据LCD_DC = 1;
	}

	for (i = 0; i < 8; i++)
	{
		if (dat & 0x80)
		{
			digitalWrite(DIN, HIGH);
		}
		else
		{
			digitalWrite(DIN, LOW);;
		}
		digitalWrite(CLK, LOW);
		dat = dat << 1;
		digitalWrite(CLK, HIGH);
	}
	digitalWrite(CE, HIGH);
}


//点          xy坐标
void point(int x, int y)//点函数
{
	SetPostion(x, int(y / 8));
	WriteData(pgm_read_byte(&xz[int(y % 8)]), 1);
}
//画图        xy坐标(0-83,0-5)，width宽度,length长度,l点阵数据,是否反显，是否从内存读取数据
void Draw(int x, int y, int width, int length, const char *l, bool reverse_display = 0, bool from_memory = 0)//xy图片左上角点的x（0-83）y（0-5）值，width为图标的宽度，length为图标的长度,l为点阵数据
{ //从flash中读取数据
	int i;
	int ii;
	int ys = length / 8;
	for (ii = 0; ii < ys; ii += 1)
	{
		for (i = ii * width + 0; i < width + ii * width; i++)
		{
			SetPostion(x + int(i % width), y + ii);
			if (reverse_display == 0 && from_memory == 0)//不反显，从闪存中读取数据
			{
				WriteData(pgm_read_byte(&l[i]), 1);
			}
			if (reverse_display == 1 && from_memory == 0)//反显，从闪存中读取数据
			{
				WriteData(0xff - pgm_read_byte(&l[i]), 1);
			}
			if (reverse_display == 0 && from_memory == 1)//不反显，从内存中读取数据
			{
				WriteData((l[i]), 1);
			}
			if (reverse_display == 1 && from_memory == 1)//反显，从内存中读取数据
			{
				WriteData((0xff - l[i]), 1);
			}
		}
	}
}
//变量输出    xy坐标(0-83,0-5), number数值，b要打印出多少位, 是否为浮点数，是否反显
void Var(int x, int y, double number, int b, boolean  float_number = 0, bool reverse_display = 0)
{

	if (float_number)//浮点数
	{
		if (number < 0)//负号
		{
			number = -number;
			Draw(x, y, 6, 8, ASCII[13], reverse_display);
			x += 6;
		}
		int xs;//小数点所在其有效数字的位数后
		for (int i = 0; i < b; i++)//计算小数点前面有几位数字
		{
			double pd = number / pow(10, i);
			if (pd < 1)
			{
				xs = i;
				break;
			}
		}
		for (int i = 0; i < b + 1; i++)
		{
			if (i < xs)//小数点前面的数字
			{
				double z = u32(number / (pow(10, xs - i))) * pow(10, xs - i);
				Draw(int(x + 6 * i), y, 6, 8, ASCII[char(u16((number - z) / (pow(10, xs - (i + 1))) + 16))], reverse_display);
			}
			if (i > xs)//小数点后面的数字
			{
				double z = u16((number - int(number)) * pow(10, (i - xs - 1))) / pow(10, (i - xs - 1));
				Draw(int(x + 6 * i - 4), y, 6, 8, ASCII[char(int((number - int(number) - z) * (pow(10, (i - xs))) + 16))], reverse_display);
			}
			if (i == xs)//小数点
			{
				Draw(x + xs * 6, y, 2, 8, decimal_point, reverse_display);
			}

		}
	}
	else//整数
	{
		if (number < 0)
		{
			number = -number;
			Draw(x, y, 6, 8, ASCII[13], reverse_display);
			x += 6;
		}
		for (int i = 0; i < b; i++)
		{
			double z = u32(number / (pow(10, b - i))) * pow(10, b - i);
			Draw(int(x + 6 * i), y, 6, 8, ASCII[char(int((number - z) / (pow(10, b - (i + 1))) + 16))], reverse_display);
		}
	}
}
//文本输出    xy坐标(0-83,0-5), l字符串，是否反显
void Text(int x, int y, char* l, boolean reverse_display = 0)
{
	String txtMsg = l;
	int char_num = txtMsg.length();
	for (int i = 0; i < char_num; i++)
	{
		for (int ia = 0; ia < 67; ia++)
		{
			char lx = l[i];
			char ly = ASCIIDZ[ia];
			if (lx == ly)
			{

				if (ia > 2 && ia < 29) //小写字母
				{
					for (int ib = 0; ib < 6; ib++)
					{
						char_conver_temp[i * 6 + ib] = pgm_read_byte(&ASCII[ia + 62][ib]);
					}

				}
				if (ia > 28 && ia < 55) //大写字母
				{
					for (int ib = 0; ib < 6; ib++)
					{
						char_conver_temp[i * 6 + ib] = pgm_read_byte(&ASCII[ia + 4][ib]);
					}
				}
				if (ia > 54 && ia < 65)//数字
				{
					for (int ib = 0; ib < 6; ib++)
					{
						char_conver_temp[i * 6 + ib] = pgm_read_byte(&ASCII[ia - 39][ib]);
					}

				}
				/**************符号********************/

				if (ia == 0)//空格
				{
					for (int ib = 0; ib < 6; ib++)
					{
						char_conver_temp[i * 6 + ib] = pgm_read_byte(&ASCII[0][ib]);
					}
				}
				if (ia == 1)//感叹号
				{
					for (int ib = 0; ib < 6; ib++)
					{
						char_conver_temp[i * 6 + ib] = pgm_read_byte(&ASCII[1][ib]);
					}
				}
				if (ia == 2)//冒号
				{
					for (int ib = 0; ib < 6; ib++)
					{
						char_conver_temp[i * 6 + ib] = pgm_read_byte(&ASCII[26][ib]);
					}
				}
				if (ia == 65)//小数点
				{
					for (int ib = 0; ib < 6; ib++)
					{
						char_conver_temp[i * 6 + ib] = pgm_read_byte(&ASCII[14][ib]);
					}
				}


				break;
			}

		}

	}
	Draw(x, y, char_num * 6, 8, char_conver_temp, reverse_display, 1);
}


//点击        button_now当前按钮是这个页面的第几个按钮，ps2摇杆的按键按下时返回true
boolean Click(int button_now)
{
	if (!digitalRead(key) && cursor_now == button_now)//ps2摇杆在按下时是断开
	{
		return true;
	}
	else
	{
		return false;
	}
}
//变量按钮    xy坐标，number变量，b要打印出多少位，float_number是否为浮点数
void ButtonVar(int x, int y, double number, int b, boolean float_number = 0) //光标标注,注册选项,保存各个光标的坐标
{
	if (page_last != page_now)//切换了页面
	{
		if (first_record == 0)//首次记录需要将光标数量置0
		{
			cursor_num = 0;
			first_record = 1;
		}
		cursor_num++;
		cursor_pos[cursor_num - 1][0] = x;
		cursor_pos[cursor_num - 1][1] = y;
	}
	else
	{
		first_record = 0;
	}
	if (page_arrow)//如果这个页面使用的是箭头作为光标标识
	{
		x += 6;//光标占用6个像素
		Var(x, y, number, b, float_number);
	}
	else//反显
	{
		if (x == cursor_pos[cursor_now][0] && y == cursor_pos[cursor_now][1])//符合当前光标坐标的反显输出，不符合的正常输出
		{
			Var(x, y, number, b, float_number, 1);
		}
		else
		{
			Var(x, y, number, b, float_number);
		}
	}
}
//文本按钮    xy坐标，l字符串
void ButtonText(int x, int y, char *l)//光标标注,注册选项,保存各个光标的坐标
{
	if (page_last != page_now)
	{
		if (first_record == 0)
		{
			cursor_num = 0;
			first_record = 1;
		}
		cursor_num++;
		cursor_pos[cursor_num - 1][0] = x;
		cursor_pos[cursor_num - 1][1] = y;
	}
	else
	{
		first_record = 0;
	}
	if (page_arrow)
	{
		x += 6;
		Text(x, y, l, 0);
	}
	else
	{
		if (x == cursor_pos[cursor_now][0] && y == cursor_pos[cursor_now][1])
		{
			Text(x, y, l, 1);
		}
		else
		{
			Text(x, y, l, 0);
		}
	}
}
//数据更改对话框   number被修改的数据，b要打印出几位数，时候为浮点，每50ms步进程度
void MsgBox(double &number, int b, boolean float_num, float range)//number要修改的数据，b数据的有效数位，c是否浮点数，range每隔50ms变动的幅度
{//arduino好像不能用模板，提示 error: 'T' was not declared in this scope
	int cursor_now_0 = cursor_now;
	int cursor_num_0 = cursor_num;
	int page_now_0 = page_now;
	delay(10);
	Clear();
	double number_temp = number;
	Draw(12, 1, 60, 32, frame);
	page_now = 255;//数据框修改，没有像ui()这个这个函数来分配页面编号，必须手动指出，不然按钮的坐标和数量不会更新
	while (1)
	{
		delay(50);
		Var(30, 2, number_temp, b, float_num);
		if (analogRead(horiziontal_input) > limit_high)
		{
			number_temp += range;
			Draw(12, 1, 60, 32, frame);
			delay(50);
		}
		if (analogRead(horiziontal_input) < limit_low)
		{
			number_temp -= range;
			Draw(12, 1, 60, 32, frame);
			delay(50);
		}
		ButtonText(25, 4, "YES");
		ButtonText(50, 4, "NO");
		if (Click(0))//第0个按钮按下
		{
			cursor_now = cursor_now_0;
			cursor_num = cursor_num_0;
			page_now = page_now_0;
			page_last = 255;
			Clear();
			number = number_temp;
			UI();
			break;
		}
		if (Click(1))
		{
			cursor_now = cursor_now_0;
			cursor_num = cursor_num_0;
			page_now = page_now_0;
			page_last = 255;
			Clear();
			UI();
			break;
		}
		ReverseDisplayEnd();
	}

}
void MsgBox(int &number, int b, boolean float_num, float range)//number要修改的数据，b数据的有效数位，c是否浮点数，range每隔50ms变动的幅度
{
	int cursor_now_0 = cursor_now;
	int cursor_num_0 = cursor_num;
	int page_now_0 = page_now;
	delay(10);
	Clear();
	int number_temp = number;
	Draw(12, 1, 60, 32, frame);
	page_now = 255;//数据框修改，没有像ui()这个这个函数来分配页面编号，必须手动指出，不然按钮的坐标和数量不会更新
	while (1)
	{
		delay(50);
		Var(30, 2, number_temp, b, float_num);
		if (analogRead(horiziontal_input) > limit_high)
		{
			number_temp += range;
			Draw(12, 1, 60, 32, frame);
			delay(50);
		}
		if (analogRead(horiziontal_input) < limit_low)
		{
			number_temp -= range;
			Draw(12, 1, 60, 32, frame);
			delay(50);
		}
		ButtonText(25, 4, "YES");
		ButtonText(50, 4, "NO");
		if (Click(0))//第0个按钮按下
		{
			cursor_now = cursor_now_0;
			cursor_num = cursor_num_0;
			page_now = page_now_0;
			number = number_temp;
			Clear();
			UI();
			break;
		}
		if (Click(1))
		{
			cursor_now = cursor_now_0;
			cursor_num = cursor_num_0;
			page_now = page_now_0;
			Clear();
			UI();
			break;
		}
		Serial.println(cursor_now + "1");
		ReverseDisplayEnd();
	}

}
//页面结束使用箭头作为光标指示
void ArrowEnd()
{
	if (!page_arrow)
	{
		Clear();
	}
	page_arrow = true;//当前页面是箭头
	if (analogRead(vertical_input) > limit_high)
	{
		cursor_now++;
		if (cursor_now > cursor_num - 1)
		{
			cursor_now = 0;
		}
		Clear();
	}
	if (analogRead(vertical_input) < limit_low)
	{
		cursor_now--;
		if (cursor_now < 0)
		{
			cursor_now = cursor_num - 1;
		}
		Clear();
	}
	if (cursor_now > -1 && cursor_now < cursor_num)//限定范围防止访问到错误的内存
	{
		Draw(cursor_pos[cursor_now][0], cursor_pos[cursor_now][1], 6, 8, cursor_arrow);
	}
	if (page_now != 0) //主页不需要home键
	{
		ButtonText(54, 5, "home");//回家按钮
	}
	page_last = page_now;
	if (Click(cursor_num - 1))
	{
		page_now = 0;
	}
}
//页面结束使用反显作为光标指示
void ReverseDisplayEnd()//反显移动
{
	if (page_arrow)
	{
		Clear();//使用箭头会让这个控件推后6像素，因为控件是先绘制再指示光标样式，所以使用反显的时候可能会残留箭头样式遗留下来的几个像素，刷新就行
	}
	page_arrow = false;//当前页面不是箭头
	if (analogRead(vertical_input) > limit_high)
	{
		cursor_now++;
		if (cursor_now > cursor_num - 1)
		{
			cursor_now = 0;
		}
	}
	if (analogRead(vertical_input) < limit_low)
	{
		cursor_now--;
		if (cursor_now < 0)
		{
			cursor_now = cursor_num - 1;
		}
	}
	if (page_now != 0) //主页，提示框不需要home键
	{
		ButtonText(60, 5, "home");
	}
	page_last = page_now;
	if (Click(cursor_num - 1))
	{
		page_now = 0;
	}
}



/***********************************这些是图片****************************************************/

//在[]加progmem  让数据直接写入flash而不加载到ram
const char title[][160] PROGMEM = { {
		0x00, 0x00, 0xF8, 0x88, 0x88, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, 0x00,
		0x10, 0x60, 0x02, 0xCC, 0x80, 0x80, 0xFC, 0x40, 0x20, 0xFF, 0x10, 0x08, 0xF8, 0x00, 0x00, 0x00,
		0x00, 0x08, 0x30, 0x00, 0xFF, 0x20, 0x20, 0x20, 0x20, 0xFF, 0x20, 0x20, 0x22, 0x2C, 0x20, 0x00,
		0x00, 0x04, 0x84, 0x84, 0x44, 0x24, 0x54, 0x8F, 0x14, 0x24, 0x44, 0x84, 0x84, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1F, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x88, 0x88, 0x88, 0x88, 0x9F, 0x80, 0xF0, 0x00,
		0x04, 0x04, 0x7E, 0x01, 0x00, 0x00, 0x3F, 0x40, 0x40, 0x4F, 0x40, 0x44, 0x47, 0x40, 0x78, 0x00,
		0x04, 0x04, 0x02, 0x01, 0xFF, 0x80, 0x40, 0x30, 0x0E, 0x01, 0x06, 0x18, 0x20, 0x40, 0x80, 0x00,
		0x41, 0x39, 0x00, 0x00, 0x3C, 0x40, 0x40, 0x42, 0x4C, 0x40, 0x40, 0x70, 0x04, 0x09, 0x31, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	} ,{
		0x00, 0x3E, 0x22, 0xE2, 0x22, 0x3E, 0x00, 0x10, 0x88, 0x57, 0x24, 0x54, 0x8C, 0x00, 0x00, 0x00,
		0x20, 0x30, 0xAC, 0x63, 0x20, 0x18, 0x80, 0x90, 0x90, 0xFF, 0x90, 0x49, 0x4A, 0x48, 0x40, 0x00,
		0x80, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x80, 0xFE, 0x02, 0x02, 0xF2, 0x02, 0x02, 0xFE, 0x00, 0x00,
		0x20, 0x20, 0x20, 0xFF, 0x20, 0x22, 0x14, 0x90, 0x10, 0x00, 0xF8, 0x00, 0x00, 0xFF, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x7E, 0x40, 0x3F, 0x22, 0x22, 0x00, 0x01, 0xFE, 0x42, 0x42, 0x42, 0xFE, 0x01, 0x01, 0x00,
		0x22, 0x67, 0x22, 0x12, 0x12, 0x12, 0x40, 0x40, 0x20, 0x13, 0x0C, 0x14, 0x22, 0x41, 0xF8, 0x00,
		0x40, 0x20, 0x18, 0x07, 0x08, 0xB0, 0x40, 0x23, 0x18, 0x06, 0x01, 0x7E, 0x80, 0x83, 0xE0, 0x00,
		0x40, 0x40, 0x20, 0x13, 0x0C, 0x14, 0x22, 0x41, 0xF8, 0x00, 0x0F, 0x40, 0x80, 0x7F, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


	} , {
		0x40, 0x40, 0x42, 0xCC, 0x00, 0x00, 0x4A, 0x32, 0x22, 0x2A, 0xF1, 0x21, 0x31, 0x2D, 0x00, 0x00,
		0x10, 0x10, 0x10, 0xFF, 0x90, 0x20, 0x98, 0x48, 0x28, 0x09, 0x0E, 0x28, 0x48, 0xA8, 0x18, 0x00,
		0x80, 0x80, 0x9E, 0x92, 0x92, 0x92, 0x9E, 0xE0, 0x80, 0x9E, 0xB2, 0xD2, 0x92, 0x9E, 0x80, 0x00,
		0x40, 0x40, 0x42, 0xCC, 0x00, 0x40, 0xA0, 0x9E, 0x82, 0x82, 0x82, 0x9E, 0xA0, 0x20, 0x20, 0x00,
		0x00, 0x17, 0x15, 0xD5, 0x55, 0x57, 0x55, 0x7D, 0x55, 0x57, 0x55, 0xD5, 0x15, 0x17, 0x00, 0x00,
		0x00, 0x80, 0x40, 0x3F, 0x40, 0x80, 0x81, 0xBD, 0xA1, 0xA1, 0xBF, 0xA1, 0xA1, 0xBD, 0x81, 0x00,
		0x02, 0x42, 0x81, 0x7F, 0x00, 0x40, 0x40, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x40, 0x00,
		0x08, 0x08, 0xF4, 0x94, 0x92, 0x92, 0xF1, 0x00, 0x01, 0xF2, 0x92, 0x94, 0x94, 0xF8, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x3F, 0x90, 0x88, 0x40, 0x43, 0x2C, 0x10, 0x28, 0x46, 0x41, 0x80, 0x80, 0x00,
		0x40, 0x40, 0x40, 0x7F, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x7F, 0x40, 0x40, 0x40, 0x00,

	},{
		0x00, 0x00, 0xF8, 0x88, 0x88, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, 0x00,
		0x10, 0x10, 0xD0, 0xFF, 0x90, 0x10, 0x00, 0xFE, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xE0, 0x9F, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x08, 0x00, 0x00,
		0x00, 0x00, 0xF8, 0x88, 0x88, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x00, 0x00, 0x00,
		0x40, 0x42, 0xCC, 0x00, 0x00, 0xFE, 0x82, 0x92, 0x92, 0xFE, 0x92, 0x92, 0x82, 0xFE, 0x00, 0x00,
		0x00, 0x00, 0x1F, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x88, 0x88, 0x88, 0x88, 0x9F, 0x80, 0xF0, 0x00,
		0x04, 0x03, 0x00, 0xFF, 0x00, 0x83, 0x60, 0x1F, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x40, 0x78, 0x00,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x48, 0x80, 0x40, 0x3F, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1F, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x88, 0x88, 0x88, 0x88, 0x9F, 0x80, 0xF0, 0x00,
		0x00, 0x00, 0x3F, 0x10, 0x88, 0x7F, 0x00, 0x1E, 0x12, 0x12, 0x12, 0x5E, 0x80, 0x7F, 0x00, 0x00,
	} ,{
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x40, 0xA0, 0x10, 0x08, 0x00, 0x00,
		0x10, 0x10, 0x10, 0xFF, 0x90, 0x20, 0x98, 0x48, 0x28, 0x09, 0x0E, 0x28, 0x48, 0xA8, 0x18, 0x00,
		0x40, 0x40, 0x42, 0xCC, 0x00, 0x40, 0xA0, 0x9E, 0x82, 0x82, 0x82, 0x9E, 0xA0, 0x20, 0x20, 0x00,
		0x00, 0x17, 0x15, 0xD5, 0x55, 0x57, 0x55, 0x7D, 0x55, 0x57, 0x55, 0xD5, 0x15, 0x17, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0C, 0x10, 0x21, 0x42, 0xF0, 0x00,
		0x02, 0x42, 0x81, 0x7F, 0x00, 0x40, 0x40, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x40, 0x00,
		0x00, 0x00, 0x00, 0x3F, 0x90, 0x88, 0x40, 0x43, 0x2C, 0x10, 0x28, 0x46, 0x41, 0x80, 0x80, 0x00,
		0x40, 0x40, 0x40, 0x7F, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x7F, 0x40, 0x40, 0x40, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	} ,{
		0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xBE, 0x2A, 0x2A, 0x2A, 0xEA, 0x2A, 0x2A, 0x2A, 0x3E, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x08, 0x30, 0x00, 0xFF, 0x20, 0x20, 0x20, 0x20, 0xFF, 0x20, 0x20, 0x22, 0x2C, 0x20, 0x00,
		0x00, 0x04, 0x84, 0x84, 0x44, 0x24, 0x54, 0x8F, 0x14, 0x24, 0x44, 0x84, 0x84, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7F, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x40, 0x40, 0x00,
		0x00, 0x44, 0x42, 0x49, 0x49, 0x49, 0x49, 0x7F, 0x49, 0x49, 0x49, 0x49, 0x41, 0x40, 0x00, 0x00,
		0x04, 0x04, 0x02, 0x01, 0xFF, 0x80, 0x40, 0x30, 0x0E, 0x01, 0x06, 0x18, 0x20, 0x40, 0x80, 0x00,
		0x41, 0x39, 0x00, 0x00, 0x3C, 0x40, 0x40, 0x42, 0x4C, 0x40, 0x40, 0x70, 0x04, 0x09, 0x31, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	} ,
};
const char icon[][128]PROGMEM ={
	/***********************电池***********************/
	{ 0x00, 0xE0, 0x20, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0xA0, 0x20,
	0xA0, 0xA0, 0xA0, 0x20, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF,
	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x3C, 0x3C, 0x00,
	0x00, 0x07, 0x04, 0x05, 0x05, 0x05, 0x04, 0x05, 0x05, 0x05, 0x04, 0x05, 0x05, 0x05, 0x05, 0x04,
	0x05, 0x05, 0x05, 0x04, 0x07, 0x00, 0x00, 0x00,
	},
	/*******************路线规划*************************/
	{ 0xFF, 0x21, 0x21, 0x21, 0x21, 0xA1, 0xFF, 0xA1, 0x21, 0x21, 0x21, 0xFF, 0x21, 0x21, 0x21, 0x21,
	0x21, 0xFF, 0x21, 0x21, 0x21, 0x21, 0x21, 0xFE, 0xFF, 0x24, 0x3C, 0x0A, 0x09, 0x08, 0xFF, 0x08,
	0x09, 0x0A, 0x0C, 0xFF, 0x18, 0x28, 0x48, 0x88, 0x48, 0xFF, 0x48, 0x88, 0x08, 0x88, 0x88, 0xFF,
	0x7F, 0x82, 0x82, 0x82, 0x82, 0x82, 0xFF, 0x82, 0x82, 0x82, 0x82, 0x7F, 0x82, 0x82, 0x82, 0x82,
	0x82, 0x7F, 0x82, 0x82, 0x83, 0x87, 0x84, 0xFF,
	},
	/***********************遥控器**********************/
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x40, 0xC0, 0xC0, 0xFF, 0xFF, 0xC1, 0xC1, 0x41,
	0x81, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3E, 0xDE, 0x2E, 0x2E, 0x32,
	0xDE, 0xFF, 0xFF, 0xDF, 0xFF, 0x7F, 0x3F, 0xDE, 0x22, 0xAE, 0x22, 0xDE, 0x3C, 0xF0, 0x00, 0x00,
	0x00, 0x00, 0x3F, 0x7F, 0xDD, 0xCD, 0x9D, 0xFD, 0x8E, 0x8F, 0x8F, 0x8A, 0x8B, 0x8F, 0x8F, 0xFE,
	0xFD, 0xDD, 0xCD, 0xFE, 0x7F, 0x0F, 0x00, 0x00,
	},
	/*******************电机与电调***********************/
	{ 0xFF, 0xCF, 0xC7, 0xC7, 0xC3, 0x83, 0x83, 0x03, 0x03, 0x07, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
	0x7F, 0x3F, 0x01, 0x03, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07,
	0x86, 0xC4, 0xE0, 0x00, 0x01, 0x13, 0x31, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF,
	0xFF, 0xF8, 0xF0, 0xE0, 0xC0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xE0, 0xC0,
	0xC0, 0xC1, 0xC1, 0xE3, 0xE3, 0xF3, 0xFB, 0xFF,
	},
	/********************飞控****************************/
	{ 0x00, 0x00, 0x00, 0x20, 0x60, 0x60, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0xC0, 0xC0,
	0xE0, 0xF0, 0xF8, 0x7C, 0x3C, 0x1E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1,
	0xE1, 0xF3, 0xFF, 0x7F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x03, 0x03, 0x1B, 0x1E, 0x0F, 0xFF, 0xF7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x07, 0x0F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	/******************卫星***********************/
	{ 0x08, 0x1C, 0x3E, 0x7F, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0x80, 0x80, 0xE0, 0xE0, 0xC0, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xC8, 0x88, 0x09, 0x1D,
	0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xCF, 0xC6, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x18, 0x1C, 0x0E, 0x07, 0x03, 0x06, 0x0C, 0x08, 0x08, 0x0F, 0x00, 0x00, 0x03, 0x07,
	0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0x7E, 0x3C, 0x18
	}
};
const char vs[]PROGMEM = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
0x07, 0x03, 0x03, 0xF1, 0xF3, 0xE3, 0xC7, 0x8F, 0x1F, 0x1F, 0x1F, 0x0F, 0x07, 0x83, 0xC1, 0xC0,
0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0,
0xC0, 0xCF, 0xCF, 0xE7, 0xF3, 0xF1, 0xF8, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC1, 0x83, 0x07, 0x07,
0x0F, 0x1F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF3, 0xEF, 0xF3,
0xFC, 0xFF, 0xFF, 0xE9, 0xEA, 0xEA, 0xF2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8,
0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF,
};//visual studio
const char acfun[]PROGMEM ={ 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x90, 0xC8, 0xE0, 0xE4, 0xE4, 0xC4, 0x04, 0x04, 0x04,
0x08, 0x18, 0x30, 0xD0, 0x08, 0x08, 0x04, 0x04, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00,
0x00, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x0E, 0x08, 0x11, 0x21, 0x41, 0xFC, 0xFE, 0xFE, 0x06,
0x0C, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xFC, 0x3E, 0x3F, 0x7B,
0x78, 0x78, 0x7B, 0x7F, 0x7F, 0xF8, 0xE0, 0xC0, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF0, 0xC0, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x0C,
0xF0, 0xC0, 0x00, 0x00, 0x01, 0x03, 0x0E, 0xFC, 0x5C, 0x3C, 0x0F, 0x00, 0x00, 0x00, 0x80, 0x40,
0x40, 0x40, 0x40, 0x23, 0x26, 0xAC, 0xF8, 0xF8, 0x30, 0xF0, 0xF0, 0x90, 0x71, 0xFB, 0x0F, 0x07,
0x01, 0x41, 0x00, 0x80, 0x70, 0x30, 0x3C, 0x1B, 0x88, 0x87, 0x81, 0x81, 0x06, 0x10, 0xFF, 0x00,
0x20, 0x10, 0x0C, 0x03, 0x0B, 0xCC, 0xF0, 0xC7, 0x41, 0x8E, 0xF0, 0x00, 0x00, 0x00, 0xC1, 0x7E,
0x08, 0x20, 0x80, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x3C, 0xCC, 0x06, 0x83, 0x81, 0x60, 0x18,
0x07, 0x1F, 0x74, 0xB9, 0x13, 0x5C, 0x10, 0x08, 0x04, 0x12, 0x60, 0xC0, 0x4C, 0x2E, 0x3F, 0x1F,
0x7F, 0x7D, 0x39, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x17, 0x5E, 0x6E,
0x60, 0x67, 0x10, 0x1E, 0x1E, 0x1F, 0x07, 0x0C, 0x10, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x18, 0x06, 0x03, 0x00, 0x00, 0x80, 0x60, 0x21,
0x22, 0x12, 0x14, 0x12, 0xF8, 0x01, 0x23, 0x23, 0x03, 0x41, 0xC0, 0xC0, 0xC0, 0xD0, 0x20, 0x60,
0x66, 0xA2, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x40,
0x40, 0x40, 0x40, 0x58, 0x27, 0xE0, 0xE0, 0x90, 0x80, 0x88, 0x84, 0x81, 0x80, 0x80, 0x80, 0x80,
0x80, 0x84, 0x98, 0xF0, 0xF8, 0xA0, 0x80, 0x82, 0xE7, 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};//ACFUN55X48
const char arduino[]PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xC0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0x7F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x3F,
0x3F, 0x7F, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xE0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0x7F, 0x3F,
0x3F, 0x1F, 0x9F, 0x9F, 0x9F, 0x9F, 0x1F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0x80, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E,
0x1E, 0x80, 0xC0, 0xE1, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xC0, 0x80, 0x1E,
0x1E, 0x1E, 0x7F, 0x7F, 0x7F, 0x7F, 0x1E, 0x1E, 0x00, 0x80, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7F, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x07, 0x01, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7F,
0x7F, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01,
0x00, 0xF8, 0xFC, 0xCE, 0xCE, 0xFC, 0xF8, 0x00, 0xFC, 0xFE, 0x66, 0xFE, 0xDC, 0x00, 0xFE, 0xFE,
0x86, 0x86, 0xFE, 0xFC, 0x00, 0xFE, 0xFE, 0xC0, 0xC0, 0xFE, 0xFE, 0x00, 0x86, 0x86, 0xFE, 0xFE,
0x86, 0x86, 0x00, 0xFE, 0xFC, 0x38, 0x70, 0xFE, 0xFE, 0x00, 0x78, 0xFC, 0x86, 0x86, 0xFC, 0x78,
0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01,
0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00
,
};//arduino图标48x48*/
const char kmh[]PROGMEM = { 0x1F, 0x04, 0x1A, 0x00, 0x1E, 0x02, 0x1C, 0x02, 0x1E, 0x00, 0xF8, 0x20, 0xE0, }; //km/h
const char ssd[]PROGMEM = { 0x02, 0x05, 0x72, 0x88, 0x88, 0x88, }; //摄氏度
const char wd[10]PROGMEM = { 0x01, 0x01, 0x7F, 0x01, 0x39, 0x54, 0x48, 0x00, 0x6C, 0x6C, };//温度

const char arrow[2][16]PROGMEM = { { 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, },
{ 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x00, }
};
/*************************************************************************************************/

boolean ch5;
int ch6 = analogRead(A2);
boolean ch7;//第七通道
boolean ch8;
double recv = 11.1;//接收机电压初始值11.1v
int speed;//速度
double heigDraw;//高度
unsigned int wxsl;//卫星数量
double temp = 28.0;//温度
int afcs;//飞控状态
double jgdy = 3.6; //报警电压
int pwm = 920;
/*************************开机界面*****************************/
void kjjm(int time)
{
	Draw(1, 0, 48, 48, arduino);
	Draw(53, 1, 30, 32, vs);
	delay(time / 2);
	Clear();
	Draw(15, 0, 55, 48, acfun);
	delay(time / 2);
	Clear();
}
/*******************滑动选项***************************/
void hd_yd()
{

	cursor_num = sizeof(icon) / 128;
	if (analogRead(horiziontal_input) > limit_high)
	{
		cursor_now++;
		if (cursor_now > cursor_num - 1)
		{
			cursor_now = 0;
		}
		Clear();
	}
	if (analogRead(horiziontal_input) < limit_low)
	{
		cursor_now--;
		if (cursor_now < 0)
		{
			cursor_now = cursor_num - 1;
		}
		Clear();
	}

	if (cursor_now > 0 && cursor_now < cursor_num - 1)
	{

		Draw(0, 2, 24, 24, icon[cursor_now - 1]);
		Draw(30, 2, 24, 24, icon[cursor_now]);
		Draw(59, 2, 24, 24, icon[cursor_now + 1]);
	}

	if (cursor_now == 0)
	{
		Draw(0, 2, 24, 24, icon[cursor_num - 1]);
		Draw(30, 2, 24, 24, icon[cursor_now]);
		Draw(59, 2, 24, 24, icon[cursor_now + 1]);
	}
	if (cursor_now == cursor_num - 1)
	{
		Draw(0, 2, 24, 24, icon[cursor_num - 2]);
		Draw(30, 2, 24, 24, icon[cursor_now]);
		Draw(59, 2, 24, 24, icon[0]);
	}
	Draw(0, 0, 80, 16, title[cursor_now]); //菜单标题文件必须一一对应图标文件
	if (millis() - time_temp > 1000) //每隔1000ms更换一次
	{
		Draw(33, 5, 16, 8, arrow[arrow_state]);
		arrow_state = !arrow_state;
		time_temp = millis();
	}
	page_last = page_now;

}

/*************************************************************/

//                         页面
/*************************************************************/
/***************************UI页面切换*******************************/
void UI()//页面数量
{

	if ((page_now == 0 && analogRead(horiziontal_input) < limit_low) || (page_now == 0 && analogRead(horiziontal_input) > limit_high))
	{
		page_now = 1;//在菜单页时活动横向摇杆回到主页
	}
	if (page_now == 1 && analogRead(vertical_input) > limit_high || (page_now == 1 && analogRead(vertical_input) < limit_low))
	{
		page_now = 0;//在主页时活动横向摇杆进入菜单页
	}
	if (page_last != page_now) //页面切换时清屏
	{
		Clear();
	}
	/***************根据页面编号进行切换****************/
	switch (page_now)//页面切换，分配页面编号
	{
	case 0:
		home();//主页
		break;
	case 1:
		menu();//菜单
		break;
	case 2:
		battery();//电池
		break;
	case 4:
		range();//行程
		break;
	case 5:

		fan();//行程
		break;
	default://默认相当于没分配页面编号
		page_now = 0;//必须指出home的页面编号为0，不然出现home键
		home();//主页
		break;
	}
}

/*********************************主页***********************************/
void home()
{
	/***********第一行**************/
	Text(0, 0, "CH5:", 0);
	if (ch5 == 1)
	{
		Text(22, 0, "ON", 0);
	}
	else
	{
		Text(22, 0, "OFF", 0);
	}
	Text(44, 0, "CH6:", 0);
	Var(66, 0, map(analogRead(A2), 0, 1023, 0, 999), 3, 0);//螺距，给飞手判断电位器是否回中
	 /***********第二行**************/
	Text(0, 1, "CH7:", 0);
	if (Click(0)) //当页面编号当前光标符合ch7，io2为低电位时，"ON""OFF"交换
	{
		ch7 = !ch7;
		Clear();
	}
	if (ch7 == 0) {
		ButtonText(22, 1, "OFF");
	}
	else
	{
		ButtonText(22, 1, "ON");
	}
	Text(44, 1, "CH8:", 0);
	if (Click(1))
	{
		ch8 = !ch8;
		Clear();
	}
	if (ch8 == 0) 
	{
		ButtonText(66, 1, "OFF");
	}
	else 
	{
		ButtonText(66, 1, "ON");
	}
	/***********第三行**************/
	Text(0, 2, "T:", 0);
	Var(11, 2, analogRead(A7) / 206.4, 3, 1);//xy(13,2),读取A7的模拟值除于206.4（若除于一个整数返回值也是一个整数），3位有效数字，浮点数
	Text(32, 2, "v", 0);
	Text(44, 2, "R:", 0);
	Var(55, 2, recv, 3, 1);
	Text(76, 2, "v", 0);
	/***********第四行**************/
	Text(0, 3, "V;", 0);
	Var(11, 3, speed, 3, 0);//(11,3),speed,3位有效数字，整数
	Draw(30, 3, 13, 8, kmh);//调用长度为13宽度为8的图像kmh到(30，3）
	Text(44, 3, "H:", 0);
	Var(55, 3, heigDraw, 3, 0);
	Text(76, 3, "m", 0);
	/***********第五行**************/
	Text(0, 4, "GPS:", 0);
	if (wxsl == 0)
	{
		Text(22, 4, "err", 0);
	}
	else
	{
		Var(22, 4, wxsl, 2, 0);
	}
	Draw(44, 4, 10, 8, wd);
	Var(55, 4, temp, 3, 1);
	Draw(76, 4, 6, 8, ssd);
	/***********第六行**************/
	Text(0, 5, "AFCS:", 0);//飞控模式切换
	if (Click(2))
	{
		afcs++;
		if (afcs > 2)
		{
			afcs = 0;
		}
		Clear();
	}
	switch (afcs)//afcs飞控状态
	{
	case 0:
		ButtonText(38, 5, "Manual");//当飞控状态为0时手动控制
		break;
	case 1:
		ButtonText(38, 5, "SAS");//增稳系统
		break;
	case 2:
		ButtonText(38, 5, "Auto");//自动控制
		break;
	default:
		break;
	}
	ReverseDisplayEnd();//页面结束,当前页面使用反显,使用纵向电位器对面光标进行控制,必须放在页面末尾
}
/*****************************选项页******************************/
void menu()//滑动选项页，页面编号为1
{
	hd_yd(); //当前页面使用滑动,
	for (int i = 0; i < 6; i++)
	{
		if (Click(i))
		{
			page_now = cursor_now + 2; //0是主页1，是滑动选项页
			break;
		}
	}

}
/*****************************行程页********************************/
void range(void)//电位器行程，页面编号为4
{

	ButtonVar(0, 1, analogRead(A4), 4, 0); //副翼
	ButtonVar(40, 1, analogRead(A5), 4, 0);//油门
	ButtonVar(0, 2, analogRead(A6), 4, 0);//偏航
	ButtonVar(40, 2, analogRead(A3), 4, 0);//俯仰
	ButtonVar(0, 3, analogRead(A2), 4, 0);//螺距
	Var(0, 4, digitalRead(10), 1, 0);//
	Var(30, 4, digitalRead(2), 1, 0);//左
	Var(40, 4, analogRead(A6), 1, 0);//右
	Var(50, 4, digitalRead(A4), 1, 0);//上
	Var(60, 4, digitalRead(A5), 1, 0);//下
	ButtonVar(60, 0, jgdy, 2, 1);
	if (Click(5))//当光标位置为5，按键按下时
	{
		MsgBox(jgdy, 2, 1, 0.1);//返回修改的数据,打开对话框修改数据（被修改的数据，有效数位，整数/浮点，每50ms步进程度）
	}
	ArrowEnd();//当前页面使用光标,使用纵向电位器对面光标进行控制,必须放在页面末尾
}
/********************************电池状态页******************************/
void battery()//页面编号为2
{
	//最低电压警告设置
	Text(0, 0, "T:", 0);
	Var(11, 0, analogRead(A7) / 206.4, 2, 1);//xy(13,2),读取A7的模拟值除于206.4（若除于一个整数返回值也是一个整数），3位有效数字，浮点数
	Text(30, 0, "v", 0);
	Text(0, 1, "low limit:", 0);
	ButtonVar(58, 1, jgdy, 2, 1);
	if (Click(0))//当光标位置为0，按键按下时
	{
		MsgBox(jgdy, 2, 1, 0.1);//返回修改的数据,打开对话框修改数据（被修改的数据，有效数位，整数/浮点，电位器活动时每50ms0.1）
	}
	Text(78, 1, "v", 0);
	/*******************/
	Text(0, 3, "R:", 0);
	Var(11, 3, recv, 3, 1);
	Text(35, 3, "v", 0);
	Text(0, 4, "low limit:", 0);
	ButtonVar(58, 4, recv, 3, 1);
	if (Click(1))//当光标位置为0，按键按下时
	{
		MsgBox(recv, 3, 1, 0.5); //返回修改的数据,打开对话框修改数据（被修改的数据，有效数位，整数/浮点，电位器活动时每50ms0.5）
	}
	Text(78, 4, "v", 0);
	ReverseDisplayEnd();//页面结束当前页面使用反显

}
void fan()
{
	ButtonVar(0, 2, pwm, 4, 0);
	if ( Click(0))
	{
		MsgBox(pwm, 4, 0, 50);
	}
	ReverseDisplayEnd();
}
void setup()
{
	LcdInit(6, 7, 5, 4, 3);//rst,ce,dc,din,clk
	PS2Set(12, A0, A1);//用于控制界面的ps2摇杆的按键，纵向选项电位器针脚，横向选项电位器针脚
	kjjm(1000);//开机界面,持续时间1000ms
	Serial.begin(9600);
}

void loop()
{
	UI();//启动界面
	Serial.println(page_now);
}
